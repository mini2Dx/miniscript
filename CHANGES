[1.8.8]
- Reduce Integer boxing

[1.8.7]
- Reduce memory allocations
- Reduce lock contention on game thread when queuing GameFutures

[1.8.6]
- Change GameFuture.complete() to protected visibility

[1.8.5]
- Add methods to clear interactive and non-interactive script queues

[1.8.4]
- Fix regression in 1.8.3. Updated unit tests.

[1.8.3]
- Fix interactive scripts not triggering onScriptBegin

[1.8.2]
- Add (optional) onScriptBegin method to ScriptInvocationListener

[1.8.1]
- Fix scripts in same priority group not being ordered by invoke order
- Reduce lock contention in concurrent queue poll and peek

[1.8.0]
- Add methods to get total scripts queued for execution
- Compiled script invocations now return a task ID so that individual invokes can be cancelled
- Add methods to cancel queued scripts by script or task ID
- Add methods to skip running scripts by task ID

[1.7.1]
- Fix interactive script running flag always being set to true. Update unit test.
- Reduce lock contention when interactive script queue is empty

[1.7.0]
- Prevent game future execution by checking for script skipping in constructor
- Allow scripts to be marked as player interactive to restrict one interactive script running at a time

[1.6.3]
- Fix KavaThreadPoolProvider not scheduling future tasks correctly. Reduce CPU usage.

[1.6.2]
- Add KavaThreadPoolProvider for console runtimes

[1.6.1]
- Fix executor pools not using base concurrency classes. Add checkstyle rules.

[1.6.0]
- Use mini2Dx-lock-provider for concurrency

[1.5.3]
- Add wfc() alias for waitForCompletion()

[1.5.2]
- Allow scripts to be optionally interrupted during dispose()

[1.5.1]
- Only allow currently executing scripts to finish during shutdown. Any other queued scripts will be skipped.
- Add methods to cancel queued and running futures without sending skip event
- Add method to skip queued futures

[1.5.0]
- Add support for script execution prioritization

[1.4.0]
- Fix pre-compilation of nested Lua functions using Gradle plugin

[1.3.2]
- Fix cleanup task blocking thread pool shutdown
- Name miniscript threads for easier debugging

[1.3.1]
- Fix skip script handling when invoking scripts within scripts

[1.3.0]
- Added scripts variable binding to invoke scripts within scripts
- Improved variable returning in Python scripts
- Reduced garbage generation

[1.2.0]
- Mininmum Java version is now Java 8
- Update to Groovy 2.5.10
- Update to JRuby 9.2.8.0
- Throw NoSuchScriptException if a unallocated script ID is invoked
- Provide scriptId variable to executing script

[1.1.3]
- Implement thread pool provider to allow game console compatability (thanks Stephen Kelly-Hannon) 

[1.1.2]
- Fixed pre-compiled scripts resulting with incorrect ID (thanks Stephen Kelly-Hannon) 

[1.1.1]
- Fixed paths containing numbers generating invalid package names

[1.1.0]
- Added miniscript-gradle-plugin for pre-compiling scripts at build time (currently only Lua is supported)
- Update to Kotlin 1.3.11
- Update to Groovy 2.5.4
- Update to JRuby 9.2.5.0
- Fixed ScriptExecutors sometimes being restored to pool before cancels have been completed
- Improved JRuby variable binding speed by using correct scoping

[1.0.1]
- Fixed skipScript(scriptId) skipping by task ID instead of script ID

[1.0.0]
- Added Kotlin support (Kotlin 1.2.61)
- Update to Jython 2.7.1
- Update to Groovy 2.5.2
- Update to JRuby 9.2.0.0
- Fixed GameFuture#update being called before constructor is finished

[1.0.0-beta1]
- GameScriptingEngine implementations can optionally support sandboxing
- Added sandboxing support to LuaGameScriptingEngine

[1.0.0-alpha2]
- Fixed incorrect dependencies in generated maven artifacts

[1.0.0-alpha1]
- Initial release
